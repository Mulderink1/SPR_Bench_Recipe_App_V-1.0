{"version":3,"sources":["GlobalFormStyles.js","context/app-context.js","Pages/Login/Components/LoginComponent.js","Pages/Login/Components/SignUpComponent.js","Pages/Login/LoginPage.js","Pages/Dashboard/Components/DashboardCardComponent.js","Pages/Dashboard/DashboardPage.js","Pages/Recipes/Components/DisplayDBRecipeListComponent.js","Pages/Recipes/Components/CreateRecipe.js","Pages/Recipes/RecipePage.js","context/reducers.js","context/GlobalState.js","App.js","serviceWorker.js","index.js"],"names":["globalFormStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","submit","margin","form","width","React","createContext","useStyles","avatar","backgroundColor","palette","secondary","main","classes","formClasses","context","useContext","AppContext","useState","userName","setUserName","redirectFire","setRedirectFire","loginApi","userNameParam","a","fetch","fetchResponse","json","data","nodeStatus","window","alert","push","to","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onKeyDown","e","key","target","value","onChange","Button","type","color","onClick","document","getElementById","Grid","container","item","Link","setDisplaySignUp","props","errorMsg","setErrorMsg","signUpAPI","settings","method","headers","Accept","body","JSON","stringify","noValidate","onSubmit","preventDefault","xs","helperText","justify","displaySignUp","SignUpComponent","LoginComponent","alt","root","LandingPageCard","landingPageCardRedirectFire","setLandingPageCardRedirectFire","element","redirect","Card","style","CardActionArea","CardMedia","height","image","title","CardContent","gutterBottom","buttonColor","CardActions","size","cardPropsArray","DashboardPage","map","mapElement","head","ColorLinearProgress","withStyles","colorPrimary","barColorPrimary","LinearProgress","response","DisplayDBRecipeListComponent","recipes","setRecipes","load","setLoad","setError","useEffect","fetchRecipes","then","Items","catch","err","message","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","recipe","index","hover","scope","recipe_id","success","light","SignIn","recipeName","setRecipeName","recipeIntro","setRecipeIntro","cookTime","setCookTime","prepTime","setPrepTime","servings","setServings","ingredients","setIngredients","directions","setDirections","recipeID","setRecipeID","saveRecipe","toLowerCase","split","join","handleRecipeNameConversion","multiline","rows","ingredient","event","values","handleIngredientChange","splice","handleRemoveIngredients","handleAddIngredients","direction","handleDirectionChange","handleRemoveDirections","handleAddDirections","href","recipeTitle","textAlign","RecipePage","match","useRouteMatch","path","h1","appReducer","state","action","displaySignUpBoolean","GlobalState","useReducer","appState","dispatch","globalStateObject","Provider","children","App","Consumer","LoginPage","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.837cc89c.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst globalFormStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      },\n      submit: {\n        margin: theme.spacing(3, 0, 2),\n      },\n      form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n}));\n\nexport default globalFormStyles;","import React from 'react';\n\nexport default React.createContext();\n","import React, { useState, useContext} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Redirect } from \"react-router-dom\";\nimport globalFormStyles from '../../../GlobalFormStyles';\nimport AppContext from '../../../context/app-context';\n\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  }\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const formClasses = globalFormStyles();\n\n  const context = useContext(AppContext);\n  const [userName, setUserName] = useState(0);\n  const [redirectFire, setRedirectFire] = useState(0);\n\n  const loginApi = async (userNameParam) => {\n    try {\n      const fetchResponse = await fetch(`/user?user_name=${userNameParam}`);\n      const data = await fetchResponse.json();\n      if (data.nodeStatus === 200) {\n        setRedirectFire(true);\n      } else if (data.nodeStatus === 401) {\n        window.alert(\"You need to create an account Brah. Create an account or go to another site, Tanks :)\");\n      } else if (data.nodeStatus === 404) {\n        window.alert(\"Something is busted on the server try again never :)\");\n      }\n      return;\n    } catch (err) {\n      return err;\n    };\n  };\n\n  if (redirectFire) {\n    return <Redirect push to=\"/dashboard\" />\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={formClasses.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"email\"\n          label=\"User Name\"\n          name=\"user_name\"\n          autoComplete=\"use_name\"\n          autoFocus\n          onKeyDown={(e) => {\n            if (e.key !== 'Enter') { return; };\n            loginApi(userName);\n            setUserName('');\n            e.target.value = '';\n          }}\n          onChange={(e) => {\n            setUserName(e.target.value);\n          }}\n        />\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          className={formClasses.submit}\n          onClick={(e) => {\n            loginApi(userName);\n            document.getElementById('email').value = '';\n          }}\n        >\n          Sign In\n        </Button>\n        <Grid container>\n          <Grid item>\n            <Link variant=\"body2\" onClick={ () => context.setDisplaySignUp(true) } >\n              {\"Don't have an account? Sign Up\"}\n            </Link>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n};","import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { Redirect } from \"react-router-dom\";\nimport AppContext from '../../../context/app-context';\nimport globalFormStyles from '../../../GlobalFormStyles';\n\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n  }\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n  const formClasses = globalFormStyles();\n\n  const context = useContext(AppContext);\n  const [userName, setUserName] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [redirectFire, setRedirectFire] = useState(false);\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n      if(userName !== ''){\n          setErrorMsg('');\n          alert(`Submitting name ${userName}`)\n          signUpAPI(userName);\n      }\n      else{\n          setErrorMsg('Cannot leave user name blank');\n      }\n  };\n\n  const signUpAPI = async (userNameParam) => {\n      const data = {\n          userName:userNameParam\n      };\n\n      const settings = {\n          method:'POST',\n          headers:{\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data)\n      }\n\n      try{\n          const fetchResponse = await fetch(`/user`, settings);\n          const data = await fetchResponse.json();\n          if(data.nodeStatus === 200){\n              setRedirectFire(true);\n          }else if(data.nodeStatus === 400){\n              alert(`Unable to add account for ${userNameParam}`)\n          }else{\n              alert(`Unknown error...this site is broken:(`)\n          }\n          return;\n      }catch(err){\n          return err;\n      };\n  };\n\n  if (redirectFire) {\n    return <Redirect push to=\"/dashboard\" />\n  };\n\n  return(\n    <Container component=\"main\" maxWidth=\"xs\">\n    <CssBaseline />\n      <div className={formClasses.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={formClasses.form} noValidate onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"user_name\"\n                label=\"User Name\"\n                name=\"user_name\"\n                autoComplete=\"user_name\"\n                helperText = {errorMsg}\n                onChange={e => setUserName(e.target.value)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={formClasses.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link variant=\"body2\" onClick={() => context.setDisplaySignUp(false)}>\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n};","import React, { useContext } from 'react';\nimport LoginComponent from './Components/LoginComponent';\nimport SignUpComponent from './Components/SignUpComponent';\nimport AppContext from '../../context/app-context';\n\nexport default () => {\n  const context = useContext(AppContext);\n  return (\n    <div className=\"login-page-container\">\n      {context.displaySignUp ? <SignUpComponent /> : <LoginComponent />}\n      <img alt=\"Purple Squirrel\" />\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Redirect } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n});\n\nexport default function LandingPageCard(props) {\n  const classes = useStyles();\n\n  const [landingPageCardRedirectFire, setLandingPageCardRedirectFire] = useState(0);\n\n  if (landingPageCardRedirectFire) { return <Redirect push to={props.element.redirect} /> };\n\n  return (\n    <div>\n      <br />\n      <Card className={classes.root} style={{ backgroundColor: props.element.backgroundColor }}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt=\"Contemplative Reptile\"\n            height=\"140\"\n            image={props.element.image}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{ color: props.element.buttonColor }}>\n              {props.element.name}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            size=\"small\"\n            style={{ color: props.element.buttonColor }}\n            onClick={() => {\n              setLandingPageCardRedirectFire(true);\n            }}\n          >\n            Go to Page\n          </Button>\n        </CardActions>\n      </Card>\n      <br />\n    </div>\n  );\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport DashboardCardComponent from './Components/DashboardCardComponent';\n\n// Use this Array to build out custom Properties for each card.\nconst cardPropsArray = [{\n    name: \"Emma\",\n    image: \"https://avatarfiles.alphacoders.com/213/213116.jpg\",\n    backgroundColor: \"#D8D8D8\",\n    buttonColor: \"#660000\",\n    redirect: \"./\"\n  }, {\n    name: \"Michelle\",\n    image: \"https://avatarfiles.alphacoders.com/213/213116.jpg\",\n    backgroundColor: \"#808080\",\n    buttonColor: \"#cc0000\",\n    redirect: \"./\"\n  }, {\n    name: \"Mike\",\n    image: \"https://avatarfiles.alphacoders.com/213/213116.jpg\",\n    backgroundColor: \"#000000\",\n    buttonColor: \"#ff0000\",\n    redirect: \"./\"\n  }];\n\nexport default function DashboardPage() {\n  return (\n    <div>\n      <h1>Purple Squirrels</h1>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Login Page</Link>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <Link to=\"/recipe\">Recipe Page</Link>\n          </li>\n        </ul>\n      </nav>\n      <div>\n        {cardPropsArray.map(mapElement => <DashboardCardComponent element={mapElement} />)}\n      </div>\n    </div>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport {makeStyles, withStyles} from \"@material-ui/core/styles/index\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    head: {\n        backgroundColor: \"#00bde5\",\n        color: \"#FFFFFF\",\n    },\n}));\n\nconst ColorLinearProgress = withStyles({\n    colorPrimary: {\n        backgroundColor: '#ccf6ff',\n    },\n    barColorPrimary: {\n        backgroundColor: '#00bde5',\n    },\n})(LinearProgress);\n\nasync function fetchRecipes() {\n    const response = await fetch('/recipes');\n    const body = await response.json();\n    return body;\n}\n\nfunction DisplayDBRecipeListComponent(){\n    const [recipes, setRecipes] = useState([]);\n    const [load, setLoad] = useState(false);\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        fetchRecipes()\n        .then(body => {\n            setRecipes(body.Items);\n            setLoad(true);\n        })\n        .catch(err => {\n            setError(err.message);\n            setLoad(true);\n        });\n    }, []);\n\n    if (load) {\n        return (\n            <TableContainer component={Paper}>\n                <Table aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.head}>Recipe Id</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {recipes.map((recipe, index) =>\n                            <TableRow hover key={index}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {recipe.recipe_id}\n                                </TableCell>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    } else {\n        return(\n            <div>\n                <ColorLinearProgress />\n            </div>\n        );\n    }\n}\n\nexport default DisplayDBRecipeListComponent;","import React, { useState, Fragment} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport RestaurantMenuRoundedIcon from '@material-ui/icons/RestaurantMenuRounded';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Redirect } from \"react-router-dom\";\nimport globalFormStyles from '../../../GlobalFormStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.success.light,\n  }\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const formClasses = globalFormStyles();\n\n  const [recipeName, setRecipeName] = useState('');\n  const [recipeIntro, setRecipeIntro] = useState('');\n  const [cookTime, setCookTime] = useState('');\n  const [prepTime, setPrepTime] = useState('');\n  const [servings, setServings] = useState('');\n  const [ingredients, setIngredients] = useState(['']);\n  const [directions, setDirections] = useState(['']);\n  const[recipeID, setRecipeID] = useState('');\n  const[redirectFire, setRedirectFire] = useState(false);\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(`Recipe name: ${recipeName}\\nRecipe ID: ${recipeID}\\nRecipe Intro: ${recipeIntro}\\nCook Time: ${cookTime}\\nPrep Time:${prepTime}\\nServings: ${servings}\\nIngredients: ${ingredients}\\nDirections: ${directions}`);\n    saveRecipe();\n  }\n\n  const handleRecipeNameConversion = (e) => {\n    setRecipeName(e.target.value);\n    setRecipeID(e.target.value.toLowerCase().split(' ').join('_'));\n  }\n\n  const handleAddIngredients = () => {\n    const values = [...ingredients];\n    values.push('');\n    setIngredients(values);\n  }\n\n  const handleRemoveIngredients = index => {\n    const values = [...ingredients];\n    values.splice(index, 1);\n    setIngredients(values);\n  }\n\n  const handleAddDirections = () => {\n    const values = [...directions];\n    values.push('');\n    setDirections(values);\n  }\n\n  const handleRemoveDirections = index => {\n    const values = [...directions];\n    values.splice(index, 1);\n    setDirections(values);\n  }\n\n  const handleIngredientChange = (index,event) => {\n      const values = [...ingredients];\n      values[index] = event.target.value;\n      setIngredients(values);\n  }\n\n  const handleDirectionChange = (index, event) => {\n    const values = [...directions];\n    values[index] = event.target.value;\n    setDirections(values);\n  }\n\n  const saveRecipe = () => {\n      //Will eventually make post call to java backend\n      setRedirectFire(true);\n  }\n\n  if(redirectFire){\n      return <Redirect push to=\"/recipe\"/>\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={formClasses.paper}>\n        <Avatar className={classes.avatar}>\n          <RestaurantMenuRoundedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Create Recipe\n        </Typography>\n        <form className={formClasses.form} noValidate onSubmit={handleSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"recipeName\"\n            label=\"Recipe Name\"\n            name=\"recipeName\"\n            autoComplete=\"recipeName\"\n            autoFocus\n            onChange={e => handleRecipeNameConversion(e)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            multiline\n            rows=\"4\"\n            fullWidth\n            name=\"recipe_intro\"\n            label=\"Recipe Description\"\n            id=\"recipe_intro\"\n            autoComplete=\"recipe_intro\"\n            onChange={e => setRecipeIntro(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            name=\"cookTime\"\n            label=\"Cook Time\"\n            id=\"cookTime\"\n            autoComplete=\"cookTime\"\n            onChange={e => setCookTime(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            name=\"prepTime\"\n            label=\"Prep Time\"\n            id=\"prepTime\"\n            autoComplete=\"prepTime\"\n            onChange={e => setPrepTime(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            name=\"servings\"\n            label=\"Servings\"\n            id=\"servings\"\n            autoComplete=\"servings\"\n            onChange={e => setServings(e.target.value)}\n          />\n\n          {ingredients.map((ingredient,index) => (\n            <Fragment key={`${index}`}>\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    name=\"ingredient\"\n                    label=\"Ingredient\"\n                    id=\"ingredient\"\n                    onChange={event => handleIngredientChange(index, event)}\n                />\n              <div className=\"form-group col-sm-2\">\n                <button\n                  className=\"btn btn-link\"\n                  type=\"button\"\n                  onClick={() => handleRemoveIngredients(index)}\n                >\n                  -\n                </button>\n                <button\n                  className=\"btn btn-link\"\n                  type=\"button\"\n                  onClick={() => handleAddIngredients()}\n                >\n                  +\n                </button>\n              </div>\n            </Fragment>\n          ))}\n         \n         {directions.map((direction,index) => (\n            <Fragment key={`${index}`}>\n               <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    name=\"direction\"\n                    label=\"Direction\"\n                    id=\"direction\"\n                    onChange={event => handleDirectionChange(index, event)}\n                />\n              <div className=\"form-group col-sm-2\">\n                <button\n                  className=\"btn btn-link\"\n                  type=\"button\"\n                  onClick={() => handleRemoveDirections(index)}\n                >\n                  -\n                </button>\n                <button\n                  className=\"btn btn-link\"\n                  type=\"button\"\n                  onClick={() => handleAddDirections()}\n                >\n                  +\n                </button>\n              </div>\n            </Fragment>\n          ))}\n\n          <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={formClasses.submit}\n                > \n                    Save Recipe\n         </Button>\n         <Button\n                type=\"button\"\n                fullWidth\n                className={formClasses.submit}\n                variant=\"contained\"\n                color=\"secondary\"\n                href=\"./recipe\"\n                >\n            Cancel\n        </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}","import React from 'react';\nimport DisplayDBRecipeListComponent from './Components/DisplayDBRecipeListComponent';\nimport CreateRecipe from './Components/CreateRecipe';\nimport { useRouteMatch, Switch, Route } from \"react-router-dom\";\nimport {makeStyles, } from \"@material-ui/core/styles/index\";\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(() => ({\n    recipeTitle: {\n        textAlign: \"center\",\n    },\n}));\n\nfunction RecipePage() {\n  let match = useRouteMatch();\n  const classes = useStyles();\n\n  return (\n    <Switch>\n      <Route path={`${match.path}/create`}>\n        <CreateRecipe />\n      </Route>\n      <Route path={match.path}>\n          <Container maxWidth=\"sm\">\n              <h1 className={classes.h1}>Your Recipes</h1>\n              <DisplayDBRecipeListComponent />\n          </Container>\n      </Route>\n    </Switch>\n  );\n};\n\nexport default RecipePage;","export const DISPLAY_SIGNUP = 'DISPLAY_SIGNUP';\n\nconst setDisplaySignUp = (action, state) => {\n  return { ...state, displaySignUp: action.displaySignUpBoolean };\n};\n\nexport const appReducer = (state, action) => {\n  switch (action.type) {\n    case DISPLAY_SIGNUP:\n      return setDisplaySignUp(action, state);\n    default:\n      return state;\n  };\n};\n","import React, { useReducer } from 'react';\nimport AppContext from './app-context';\nimport { appReducer, DISPLAY_SIGNUP } from './reducers';\n\nconst GlobalState = props => {\n  const [appState, dispatch] = useReducer(appReducer, { displaySignUp: false });\n\n  const setDisplaySignUp = displaySignUpBoolean => {\n    dispatch({ type: DISPLAY_SIGNUP, displaySignUpBoolean: displaySignUpBoolean })\n  };\n\n  const globalStateObject = {\n    displaySignUp: appState.displaySignUp,\n    setDisplaySignUp: setDisplaySignUp\n  };\n\n  return (\n    <AppContext.Provider value={ globalStateObject }>\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default GlobalState;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport LoginPage from './Pages/Login/LoginPage';\nimport DashboardPage from './Pages/Dashboard/DashboardPage';\nimport RecipePage from './Pages/Recipes/RecipePage';\nimport './App.css';\nimport GlobalState from './context/GlobalState';\nimport AppContext from './context/app-context';\n\nconst App = () => {\n  return (\n    <GlobalState>\n      <AppContext.Consumer>\n        {() => (\n          <Router>\n            <div>\n              {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n              <Switch>\n                <Route path=\"/recipe\">\n                  <RecipePage />\n                </Route>\n                <Route path=\"/dashboard\">\n                  <DashboardPage />\n                </Route>\n                <Route path=\"/\">\n                  <LoginPage />\n                </Route>\n              </Switch>\n            </div>\n          </Router>\n        )}\n      </AppContext.Consumer>\n    </GlobalState>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}